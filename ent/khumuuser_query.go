// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khu-dev/khumu-comment/ent/article"
	"github.com/khu-dev/khumu-comment/ent/comment"
	"github.com/khu-dev/khumu-comment/ent/khumuuser"
	"github.com/khu-dev/khumu-comment/ent/predicate"
)

// KhumuUserQuery is the builder for querying KhumuUser entities.
type KhumuUserQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.KhumuUser
	// eager-loading edges.
	withComments *CommentQuery
	withArticles *ArticleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KhumuUserQuery builder.
func (kuq *KhumuUserQuery) Where(ps ...predicate.KhumuUser) *KhumuUserQuery {
	kuq.predicates = append(kuq.predicates, ps...)
	return kuq
}

// Limit adds a limit step to the query.
func (kuq *KhumuUserQuery) Limit(limit int) *KhumuUserQuery {
	kuq.limit = &limit
	return kuq
}

// Offset adds an offset step to the query.
func (kuq *KhumuUserQuery) Offset(offset int) *KhumuUserQuery {
	kuq.offset = &offset
	return kuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kuq *KhumuUserQuery) Unique(unique bool) *KhumuUserQuery {
	kuq.unique = &unique
	return kuq
}

// Order adds an order step to the query.
func (kuq *KhumuUserQuery) Order(o ...OrderFunc) *KhumuUserQuery {
	kuq.order = append(kuq.order, o...)
	return kuq
}

// QueryComments chains the current query on the "comments" edge.
func (kuq *KhumuUserQuery) QueryComments() *CommentQuery {
	query := &CommentQuery{config: kuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(khumuuser.Table, khumuuser.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, khumuuser.CommentsTable, khumuuser.CommentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(kuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryArticles chains the current query on the "articles" edge.
func (kuq *KhumuUserQuery) QueryArticles() *ArticleQuery {
	query := &ArticleQuery{config: kuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(khumuuser.Table, khumuuser.FieldID, selector),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, khumuuser.ArticlesTable, khumuuser.ArticlesColumn),
		)
		fromU = sqlgraph.SetNeighbors(kuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KhumuUser entity from the query.
// Returns a *NotFoundError when no KhumuUser was found.
func (kuq *KhumuUserQuery) First(ctx context.Context) (*KhumuUser, error) {
	nodes, err := kuq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{khumuuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kuq *KhumuUserQuery) FirstX(ctx context.Context) *KhumuUser {
	node, err := kuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KhumuUser ID from the query.
// Returns a *NotFoundError when no KhumuUser ID was found.
func (kuq *KhumuUserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = kuq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{khumuuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kuq *KhumuUserQuery) FirstIDX(ctx context.Context) string {
	id, err := kuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KhumuUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one KhumuUser entity is not found.
// Returns a *NotFoundError when no KhumuUser entities are found.
func (kuq *KhumuUserQuery) Only(ctx context.Context) (*KhumuUser, error) {
	nodes, err := kuq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{khumuuser.Label}
	default:
		return nil, &NotSingularError{khumuuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kuq *KhumuUserQuery) OnlyX(ctx context.Context) *KhumuUser {
	node, err := kuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KhumuUser ID in the query.
// Returns a *NotSingularError when exactly one KhumuUser ID is not found.
// Returns a *NotFoundError when no entities are found.
func (kuq *KhumuUserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = kuq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = &NotSingularError{khumuuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kuq *KhumuUserQuery) OnlyIDX(ctx context.Context) string {
	id, err := kuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KhumuUsers.
func (kuq *KhumuUserQuery) All(ctx context.Context) ([]*KhumuUser, error) {
	if err := kuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kuq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kuq *KhumuUserQuery) AllX(ctx context.Context) []*KhumuUser {
	nodes, err := kuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KhumuUser IDs.
func (kuq *KhumuUserQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := kuq.Select(khumuuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kuq *KhumuUserQuery) IDsX(ctx context.Context) []string {
	ids, err := kuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kuq *KhumuUserQuery) Count(ctx context.Context) (int, error) {
	if err := kuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kuq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kuq *KhumuUserQuery) CountX(ctx context.Context) int {
	count, err := kuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kuq *KhumuUserQuery) Exist(ctx context.Context) (bool, error) {
	if err := kuq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kuq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kuq *KhumuUserQuery) ExistX(ctx context.Context) bool {
	exist, err := kuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KhumuUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kuq *KhumuUserQuery) Clone() *KhumuUserQuery {
	if kuq == nil {
		return nil
	}
	return &KhumuUserQuery{
		config:       kuq.config,
		limit:        kuq.limit,
		offset:       kuq.offset,
		order:        append([]OrderFunc{}, kuq.order...),
		predicates:   append([]predicate.KhumuUser{}, kuq.predicates...),
		withComments: kuq.withComments.Clone(),
		withArticles: kuq.withArticles.Clone(),
		// clone intermediate query.
		sql:  kuq.sql.Clone(),
		path: kuq.path,
	}
}

// WithComments tells the query-builder to eager-load the nodes that are connected to
// the "comments" edge. The optional arguments are used to configure the query builder of the edge.
func (kuq *KhumuUserQuery) WithComments(opts ...func(*CommentQuery)) *KhumuUserQuery {
	query := &CommentQuery{config: kuq.config}
	for _, opt := range opts {
		opt(query)
	}
	kuq.withComments = query
	return kuq
}

// WithArticles tells the query-builder to eager-load the nodes that are connected to
// the "articles" edge. The optional arguments are used to configure the query builder of the edge.
func (kuq *KhumuUserQuery) WithArticles(opts ...func(*ArticleQuery)) *KhumuUserQuery {
	query := &ArticleQuery{config: kuq.config}
	for _, opt := range opts {
		opt(query)
	}
	kuq.withArticles = query
	return kuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Nickname string `json:"nickname,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KhumuUser.Query().
//		GroupBy(khumuuser.FieldNickname).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kuq *KhumuUserQuery) GroupBy(field string, fields ...string) *KhumuUserGroupBy {
	group := &KhumuUserGroupBy{config: kuq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kuq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Nickname string `json:"nickname,omitempty"`
//	}
//
//	client.KhumuUser.Query().
//		Select(khumuuser.FieldNickname).
//		Scan(ctx, &v)
//
func (kuq *KhumuUserQuery) Select(field string, fields ...string) *KhumuUserSelect {
	kuq.fields = append([]string{field}, fields...)
	return &KhumuUserSelect{KhumuUserQuery: kuq}
}

func (kuq *KhumuUserQuery) prepareQuery(ctx context.Context) error {
	for _, f := range kuq.fields {
		if !khumuuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kuq.path != nil {
		prev, err := kuq.path(ctx)
		if err != nil {
			return err
		}
		kuq.sql = prev
	}
	return nil
}

func (kuq *KhumuUserQuery) sqlAll(ctx context.Context) ([]*KhumuUser, error) {
	var (
		nodes       = []*KhumuUser{}
		_spec       = kuq.querySpec()
		loadedTypes = [2]bool{
			kuq.withComments != nil,
			kuq.withArticles != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &KhumuUser{config: kuq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, kuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := kuq.withComments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*KhumuUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Comments = []*Comment{}
		}
		query.withFKs = true
		query.Where(predicate.Comment(func(s *sql.Selector) {
			s.Where(sql.InValues(khumuuser.CommentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.author_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "author_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "author_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Comments = append(node.Edges.Comments, n)
		}
	}

	if query := kuq.withArticles; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*KhumuUser)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Articles = []*Article{}
		}
		query.withFKs = true
		query.Where(predicate.Article(func(s *sql.Selector) {
			s.Where(sql.InValues(khumuuser.ArticlesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.author_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "author_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "author_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Articles = append(node.Edges.Articles, n)
		}
	}

	return nodes, nil
}

func (kuq *KhumuUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kuq.querySpec()
	return sqlgraph.CountNodes(ctx, kuq.driver, _spec)
}

func (kuq *KhumuUserQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := kuq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (kuq *KhumuUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   khumuuser.Table,
			Columns: khumuuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: khumuuser.FieldID,
			},
		},
		From:   kuq.sql,
		Unique: true,
	}
	if unique := kuq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := kuq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, khumuuser.FieldID)
		for i := range fields {
			if fields[i] != khumuuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kuq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kuq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kuq *KhumuUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kuq.driver.Dialect())
	t1 := builder.Table(khumuuser.Table)
	selector := builder.Select(t1.Columns(khumuuser.Columns...)...).From(t1)
	if kuq.sql != nil {
		selector = kuq.sql
		selector.Select(selector.Columns(khumuuser.Columns...)...)
	}
	for _, p := range kuq.predicates {
		p(selector)
	}
	for _, p := range kuq.order {
		p(selector)
	}
	if offset := kuq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kuq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KhumuUserGroupBy is the group-by builder for KhumuUser entities.
type KhumuUserGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kugb *KhumuUserGroupBy) Aggregate(fns ...AggregateFunc) *KhumuUserGroupBy {
	kugb.fns = append(kugb.fns, fns...)
	return kugb
}

// Scan applies the group-by query and scans the result into the given value.
func (kugb *KhumuUserGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := kugb.path(ctx)
	if err != nil {
		return err
	}
	kugb.sql = query
	return kugb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := kugb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (kugb *KhumuUserGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(kugb.fields) > 1 {
		return nil, errors.New("ent: KhumuUserGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := kugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) StringsX(ctx context.Context) []string {
	v, err := kugb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kugb *KhumuUserGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kugb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = fmt.Errorf("ent: KhumuUserGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) StringX(ctx context.Context) string {
	v, err := kugb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (kugb *KhumuUserGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(kugb.fields) > 1 {
		return nil, errors.New("ent: KhumuUserGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := kugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) IntsX(ctx context.Context) []int {
	v, err := kugb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kugb *KhumuUserGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kugb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = fmt.Errorf("ent: KhumuUserGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) IntX(ctx context.Context) int {
	v, err := kugb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (kugb *KhumuUserGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(kugb.fields) > 1 {
		return nil, errors.New("ent: KhumuUserGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := kugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := kugb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kugb *KhumuUserGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kugb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = fmt.Errorf("ent: KhumuUserGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) Float64X(ctx context.Context) float64 {
	v, err := kugb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (kugb *KhumuUserGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(kugb.fields) > 1 {
		return nil, errors.New("ent: KhumuUserGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := kugb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := kugb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kugb *KhumuUserGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kugb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = fmt.Errorf("ent: KhumuUserGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kugb *KhumuUserGroupBy) BoolX(ctx context.Context) bool {
	v, err := kugb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kugb *KhumuUserGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range kugb.fields {
		if !khumuuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kugb *KhumuUserGroupBy) sqlQuery() *sql.Selector {
	selector := kugb.sql
	columns := make([]string, 0, len(kugb.fields)+len(kugb.fns))
	columns = append(columns, kugb.fields...)
	for _, fn := range kugb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(kugb.fields...)
}

// KhumuUserSelect is the builder for selecting fields of KhumuUser entities.
type KhumuUserSelect struct {
	*KhumuUserQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (kus *KhumuUserSelect) Scan(ctx context.Context, v interface{}) error {
	if err := kus.prepareQuery(ctx); err != nil {
		return err
	}
	kus.sql = kus.KhumuUserQuery.sqlQuery(ctx)
	return kus.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kus *KhumuUserSelect) ScanX(ctx context.Context, v interface{}) {
	if err := kus.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (kus *KhumuUserSelect) Strings(ctx context.Context) ([]string, error) {
	if len(kus.fields) > 1 {
		return nil, errors.New("ent: KhumuUserSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := kus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kus *KhumuUserSelect) StringsX(ctx context.Context) []string {
	v, err := kus.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (kus *KhumuUserSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kus.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = fmt.Errorf("ent: KhumuUserSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kus *KhumuUserSelect) StringX(ctx context.Context) string {
	v, err := kus.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (kus *KhumuUserSelect) Ints(ctx context.Context) ([]int, error) {
	if len(kus.fields) > 1 {
		return nil, errors.New("ent: KhumuUserSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := kus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kus *KhumuUserSelect) IntsX(ctx context.Context) []int {
	v, err := kus.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (kus *KhumuUserSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kus.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = fmt.Errorf("ent: KhumuUserSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kus *KhumuUserSelect) IntX(ctx context.Context) int {
	v, err := kus.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (kus *KhumuUserSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(kus.fields) > 1 {
		return nil, errors.New("ent: KhumuUserSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := kus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kus *KhumuUserSelect) Float64sX(ctx context.Context) []float64 {
	v, err := kus.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (kus *KhumuUserSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kus.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = fmt.Errorf("ent: KhumuUserSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kus *KhumuUserSelect) Float64X(ctx context.Context) float64 {
	v, err := kus.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (kus *KhumuUserSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(kus.fields) > 1 {
		return nil, errors.New("ent: KhumuUserSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := kus.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kus *KhumuUserSelect) BoolsX(ctx context.Context) []bool {
	v, err := kus.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (kus *KhumuUserSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kus.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{khumuuser.Label}
	default:
		err = fmt.Errorf("ent: KhumuUserSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kus *KhumuUserSelect) BoolX(ctx context.Context) bool {
	v, err := kus.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kus *KhumuUserSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := kus.sqlQuery().Query()
	if err := kus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kus *KhumuUserSelect) sqlQuery() sql.Querier {
	selector := kus.sql
	selector.Select(selector.Columns(kus.fields...)...)
	return selector
}
