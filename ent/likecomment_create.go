// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khu-dev/khumu-comment/ent/comment"
	"github.com/khu-dev/khumu-comment/ent/khumuuser"
	"github.com/khu-dev/khumu-comment/ent/likecomment"
)

// LikeCommentCreate is the builder for creating a LikeComment entity.
type LikeCommentCreate struct {
	config
	mutation *LikeCommentMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (lcc *LikeCommentCreate) SetID(i int) *LikeCommentCreate {
	lcc.mutation.SetID(i)
	return lcc
}

// SetLikedByID sets the "likedBy" edge to the KhumuUser entity by ID.
func (lcc *LikeCommentCreate) SetLikedByID(id string) *LikeCommentCreate {
	lcc.mutation.SetLikedByID(id)
	return lcc
}

// SetNillableLikedByID sets the "likedBy" edge to the KhumuUser entity by ID if the given value is not nil.
func (lcc *LikeCommentCreate) SetNillableLikedByID(id *string) *LikeCommentCreate {
	if id != nil {
		lcc = lcc.SetLikedByID(*id)
	}
	return lcc
}

// SetLikedBy sets the "likedBy" edge to the KhumuUser entity.
func (lcc *LikeCommentCreate) SetLikedBy(k *KhumuUser) *LikeCommentCreate {
	return lcc.SetLikedByID(k.ID)
}

// SetAboutID sets the "about" edge to the Comment entity by ID.
func (lcc *LikeCommentCreate) SetAboutID(id int) *LikeCommentCreate {
	lcc.mutation.SetAboutID(id)
	return lcc
}

// SetNillableAboutID sets the "about" edge to the Comment entity by ID if the given value is not nil.
func (lcc *LikeCommentCreate) SetNillableAboutID(id *int) *LikeCommentCreate {
	if id != nil {
		lcc = lcc.SetAboutID(*id)
	}
	return lcc
}

// SetAbout sets the "about" edge to the Comment entity.
func (lcc *LikeCommentCreate) SetAbout(c *Comment) *LikeCommentCreate {
	return lcc.SetAboutID(c.ID)
}

// Mutation returns the LikeCommentMutation object of the builder.
func (lcc *LikeCommentCreate) Mutation() *LikeCommentMutation {
	return lcc.mutation
}

// Save creates the LikeComment in the database.
func (lcc *LikeCommentCreate) Save(ctx context.Context) (*LikeComment, error) {
	var (
		err  error
		node *LikeComment
	)
	if len(lcc.hooks) == 0 {
		if err = lcc.check(); err != nil {
			return nil, err
		}
		node, err = lcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LikeCommentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lcc.check(); err != nil {
				return nil, err
			}
			lcc.mutation = mutation
			node, err = lcc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lcc.hooks) - 1; i >= 0; i-- {
			mut = lcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LikeCommentCreate) SaveX(ctx context.Context) *LikeComment {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LikeCommentCreate) check() error {
	return nil
}

func (lcc *LikeCommentCreate) sqlSave(ctx context.Context) (*LikeComment, error) {
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (lcc *LikeCommentCreate) createSpec() (*LikeComment, *sqlgraph.CreateSpec) {
	var (
		_node = &LikeComment{config: lcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: likecomment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: likecomment.FieldID,
			},
		}
	)
	if id, ok := lcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := lcc.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likecomment.LikedByTable,
			Columns: []string{likecomment.LikedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: khumuuser.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lcc.mutation.AboutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   likecomment.AboutTable,
			Columns: []string{likecomment.AboutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.comment_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LikeCommentCreateBulk is the builder for creating many LikeComment entities in bulk.
type LikeCommentCreateBulk struct {
	config
	builders []*LikeCommentCreate
}

// Save creates the LikeComment entities in the database.
func (lccb *LikeCommentCreateBulk) Save(ctx context.Context) ([]*LikeComment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LikeComment, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LikeCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LikeCommentCreateBulk) SaveX(ctx context.Context) []*LikeComment {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
