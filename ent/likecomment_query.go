// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khu-dev/khumu-comment/ent/comment"
	"github.com/khu-dev/khumu-comment/ent/khumuuser"
	"github.com/khu-dev/khumu-comment/ent/likecomment"
	"github.com/khu-dev/khumu-comment/ent/predicate"
)

// LikeCommentQuery is the builder for querying LikeComment entities.
type LikeCommentQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.LikeComment
	// eager-loading edges.
	withLikedBy *KhumuUserQuery
	withAbout   *CommentQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LikeCommentQuery builder.
func (lcq *LikeCommentQuery) Where(ps ...predicate.LikeComment) *LikeCommentQuery {
	lcq.predicates = append(lcq.predicates, ps...)
	return lcq
}

// Limit adds a limit step to the query.
func (lcq *LikeCommentQuery) Limit(limit int) *LikeCommentQuery {
	lcq.limit = &limit
	return lcq
}

// Offset adds an offset step to the query.
func (lcq *LikeCommentQuery) Offset(offset int) *LikeCommentQuery {
	lcq.offset = &offset
	return lcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lcq *LikeCommentQuery) Unique(unique bool) *LikeCommentQuery {
	lcq.unique = &unique
	return lcq
}

// Order adds an order step to the query.
func (lcq *LikeCommentQuery) Order(o ...OrderFunc) *LikeCommentQuery {
	lcq.order = append(lcq.order, o...)
	return lcq
}

// QueryLikedBy chains the current query on the "likedBy" edge.
func (lcq *LikeCommentQuery) QueryLikedBy() *KhumuUserQuery {
	query := &KhumuUserQuery{config: lcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(likecomment.Table, likecomment.FieldID, selector),
			sqlgraph.To(khumuuser.Table, khumuuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, likecomment.LikedByTable, likecomment.LikedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(lcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAbout chains the current query on the "about" edge.
func (lcq *LikeCommentQuery) QueryAbout() *CommentQuery {
	query := &CommentQuery{config: lcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(likecomment.Table, likecomment.FieldID, selector),
			sqlgraph.To(comment.Table, comment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, likecomment.AboutTable, likecomment.AboutColumn),
		)
		fromU = sqlgraph.SetNeighbors(lcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first LikeComment entity from the query.
// Returns a *NotFoundError when no LikeComment was found.
func (lcq *LikeCommentQuery) First(ctx context.Context) (*LikeComment, error) {
	nodes, err := lcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{likecomment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lcq *LikeCommentQuery) FirstX(ctx context.Context) *LikeComment {
	node, err := lcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first LikeComment ID from the query.
// Returns a *NotFoundError when no LikeComment ID was found.
func (lcq *LikeCommentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{likecomment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lcq *LikeCommentQuery) FirstIDX(ctx context.Context) int {
	id, err := lcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single LikeComment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one LikeComment entity is not found.
// Returns a *NotFoundError when no LikeComment entities are found.
func (lcq *LikeCommentQuery) Only(ctx context.Context) (*LikeComment, error) {
	nodes, err := lcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{likecomment.Label}
	default:
		return nil, &NotSingularError{likecomment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lcq *LikeCommentQuery) OnlyX(ctx context.Context) *LikeComment {
	node, err := lcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only LikeComment ID in the query.
// Returns a *NotSingularError when exactly one LikeComment ID is not found.
// Returns a *NotFoundError when no entities are found.
func (lcq *LikeCommentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = &NotSingularError{likecomment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lcq *LikeCommentQuery) OnlyIDX(ctx context.Context) int {
	id, err := lcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of LikeComments.
func (lcq *LikeCommentQuery) All(ctx context.Context) ([]*LikeComment, error) {
	if err := lcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return lcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (lcq *LikeCommentQuery) AllX(ctx context.Context) []*LikeComment {
	nodes, err := lcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of LikeComment IDs.
func (lcq *LikeCommentQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := lcq.Select(likecomment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lcq *LikeCommentQuery) IDsX(ctx context.Context) []int {
	ids, err := lcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lcq *LikeCommentQuery) Count(ctx context.Context) (int, error) {
	if err := lcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return lcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (lcq *LikeCommentQuery) CountX(ctx context.Context) int {
	count, err := lcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lcq *LikeCommentQuery) Exist(ctx context.Context) (bool, error) {
	if err := lcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return lcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (lcq *LikeCommentQuery) ExistX(ctx context.Context) bool {
	exist, err := lcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LikeCommentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lcq *LikeCommentQuery) Clone() *LikeCommentQuery {
	if lcq == nil {
		return nil
	}
	return &LikeCommentQuery{
		config:      lcq.config,
		limit:       lcq.limit,
		offset:      lcq.offset,
		order:       append([]OrderFunc{}, lcq.order...),
		predicates:  append([]predicate.LikeComment{}, lcq.predicates...),
		withLikedBy: lcq.withLikedBy.Clone(),
		withAbout:   lcq.withAbout.Clone(),
		// clone intermediate query.
		sql:  lcq.sql.Clone(),
		path: lcq.path,
	}
}

// WithLikedBy tells the query-builder to eager-load the nodes that are connected to
// the "likedBy" edge. The optional arguments are used to configure the query builder of the edge.
func (lcq *LikeCommentQuery) WithLikedBy(opts ...func(*KhumuUserQuery)) *LikeCommentQuery {
	query := &KhumuUserQuery{config: lcq.config}
	for _, opt := range opts {
		opt(query)
	}
	lcq.withLikedBy = query
	return lcq
}

// WithAbout tells the query-builder to eager-load the nodes that are connected to
// the "about" edge. The optional arguments are used to configure the query builder of the edge.
func (lcq *LikeCommentQuery) WithAbout(opts ...func(*CommentQuery)) *LikeCommentQuery {
	query := &CommentQuery{config: lcq.config}
	for _, opt := range opts {
		opt(query)
	}
	lcq.withAbout = query
	return lcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (lcq *LikeCommentQuery) GroupBy(field string, fields ...string) *LikeCommentGroupBy {
	group := &LikeCommentGroupBy{config: lcq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := lcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return lcq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (lcq *LikeCommentQuery) Select(field string, fields ...string) *LikeCommentSelect {
	lcq.fields = append([]string{field}, fields...)
	return &LikeCommentSelect{LikeCommentQuery: lcq}
}

func (lcq *LikeCommentQuery) prepareQuery(ctx context.Context) error {
	for _, f := range lcq.fields {
		if !likecomment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lcq.path != nil {
		prev, err := lcq.path(ctx)
		if err != nil {
			return err
		}
		lcq.sql = prev
	}
	return nil
}

func (lcq *LikeCommentQuery) sqlAll(ctx context.Context) ([]*LikeComment, error) {
	var (
		nodes       = []*LikeComment{}
		withFKs     = lcq.withFKs
		_spec       = lcq.querySpec()
		loadedTypes = [2]bool{
			lcq.withLikedBy != nil,
			lcq.withAbout != nil,
		}
	)
	if lcq.withLikedBy != nil || lcq.withAbout != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, likecomment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &LikeComment{config: lcq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, lcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := lcq.withLikedBy; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*LikeComment)
		for i := range nodes {
			if nodes[i].user_id == nil {
				continue
			}
			fk := *nodes[i].user_id
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(khumuuser.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.LikedBy = n
			}
		}
	}

	if query := lcq.withAbout; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*LikeComment)
		for i := range nodes {
			if nodes[i].comment_id == nil {
				continue
			}
			fk := *nodes[i].comment_id
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(comment.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "comment_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.About = n
			}
		}
	}

	return nodes, nil
}

func (lcq *LikeCommentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lcq.querySpec()
	return sqlgraph.CountNodes(ctx, lcq.driver, _spec)
}

func (lcq *LikeCommentQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := lcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (lcq *LikeCommentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   likecomment.Table,
			Columns: likecomment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: likecomment.FieldID,
			},
		},
		From:   lcq.sql,
		Unique: true,
	}
	if unique := lcq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := lcq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, likecomment.FieldID)
		for i := range fields {
			if fields[i] != likecomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lcq *LikeCommentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lcq.driver.Dialect())
	t1 := builder.Table(likecomment.Table)
	selector := builder.Select(t1.Columns(likecomment.Columns...)...).From(t1)
	if lcq.sql != nil {
		selector = lcq.sql
		selector.Select(selector.Columns(likecomment.Columns...)...)
	}
	for _, p := range lcq.predicates {
		p(selector)
	}
	for _, p := range lcq.order {
		p(selector)
	}
	if offset := lcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LikeCommentGroupBy is the group-by builder for LikeComment entities.
type LikeCommentGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lcgb *LikeCommentGroupBy) Aggregate(fns ...AggregateFunc) *LikeCommentGroupBy {
	lcgb.fns = append(lcgb.fns, fns...)
	return lcgb
}

// Scan applies the group-by query and scans the result into the given value.
func (lcgb *LikeCommentGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := lcgb.path(ctx)
	if err != nil {
		return err
	}
	lcgb.sql = query
	return lcgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := lcgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (lcgb *LikeCommentGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(lcgb.fields) > 1 {
		return nil, errors.New("ent: LikeCommentGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := lcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) StringsX(ctx context.Context) []string {
	v, err := lcgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (lcgb *LikeCommentGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = lcgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = fmt.Errorf("ent: LikeCommentGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) StringX(ctx context.Context) string {
	v, err := lcgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (lcgb *LikeCommentGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(lcgb.fields) > 1 {
		return nil, errors.New("ent: LikeCommentGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := lcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) IntsX(ctx context.Context) []int {
	v, err := lcgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (lcgb *LikeCommentGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = lcgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = fmt.Errorf("ent: LikeCommentGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) IntX(ctx context.Context) int {
	v, err := lcgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (lcgb *LikeCommentGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(lcgb.fields) > 1 {
		return nil, errors.New("ent: LikeCommentGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := lcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := lcgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (lcgb *LikeCommentGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = lcgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = fmt.Errorf("ent: LikeCommentGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) Float64X(ctx context.Context) float64 {
	v, err := lcgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (lcgb *LikeCommentGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(lcgb.fields) > 1 {
		return nil, errors.New("ent: LikeCommentGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := lcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := lcgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (lcgb *LikeCommentGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = lcgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = fmt.Errorf("ent: LikeCommentGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (lcgb *LikeCommentGroupBy) BoolX(ctx context.Context) bool {
	v, err := lcgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lcgb *LikeCommentGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range lcgb.fields {
		if !likecomment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := lcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (lcgb *LikeCommentGroupBy) sqlQuery() *sql.Selector {
	selector := lcgb.sql
	columns := make([]string, 0, len(lcgb.fields)+len(lcgb.fns))
	columns = append(columns, lcgb.fields...)
	for _, fn := range lcgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(lcgb.fields...)
}

// LikeCommentSelect is the builder for selecting fields of LikeComment entities.
type LikeCommentSelect struct {
	*LikeCommentQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (lcs *LikeCommentSelect) Scan(ctx context.Context, v interface{}) error {
	if err := lcs.prepareQuery(ctx); err != nil {
		return err
	}
	lcs.sql = lcs.LikeCommentQuery.sqlQuery(ctx)
	return lcs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (lcs *LikeCommentSelect) ScanX(ctx context.Context, v interface{}) {
	if err := lcs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (lcs *LikeCommentSelect) Strings(ctx context.Context) ([]string, error) {
	if len(lcs.fields) > 1 {
		return nil, errors.New("ent: LikeCommentSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := lcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (lcs *LikeCommentSelect) StringsX(ctx context.Context) []string {
	v, err := lcs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (lcs *LikeCommentSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = lcs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = fmt.Errorf("ent: LikeCommentSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (lcs *LikeCommentSelect) StringX(ctx context.Context) string {
	v, err := lcs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (lcs *LikeCommentSelect) Ints(ctx context.Context) ([]int, error) {
	if len(lcs.fields) > 1 {
		return nil, errors.New("ent: LikeCommentSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := lcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (lcs *LikeCommentSelect) IntsX(ctx context.Context) []int {
	v, err := lcs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (lcs *LikeCommentSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = lcs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = fmt.Errorf("ent: LikeCommentSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (lcs *LikeCommentSelect) IntX(ctx context.Context) int {
	v, err := lcs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (lcs *LikeCommentSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(lcs.fields) > 1 {
		return nil, errors.New("ent: LikeCommentSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := lcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (lcs *LikeCommentSelect) Float64sX(ctx context.Context) []float64 {
	v, err := lcs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (lcs *LikeCommentSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = lcs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = fmt.Errorf("ent: LikeCommentSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (lcs *LikeCommentSelect) Float64X(ctx context.Context) float64 {
	v, err := lcs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (lcs *LikeCommentSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(lcs.fields) > 1 {
		return nil, errors.New("ent: LikeCommentSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := lcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (lcs *LikeCommentSelect) BoolsX(ctx context.Context) []bool {
	v, err := lcs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (lcs *LikeCommentSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = lcs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{likecomment.Label}
	default:
		err = fmt.Errorf("ent: LikeCommentSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (lcs *LikeCommentSelect) BoolX(ctx context.Context) bool {
	v, err := lcs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (lcs *LikeCommentSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := lcs.sqlQuery().Query()
	if err := lcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (lcs *LikeCommentSelect) sqlQuery() sql.Querier {
	selector := lcs.sql
	selector.Select(selector.Columns(lcs.fields...)...)
	return selector
}
