// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khu-dev/khumu-comment/ent/article"
	"github.com/khu-dev/khumu-comment/ent/comment"
	"github.com/khu-dev/khumu-comment/ent/khumuuser"
	"github.com/khu-dev/khumu-comment/ent/likecomment"
	"github.com/khu-dev/khumu-comment/ent/studyarticle"
)

// KhumuUserCreate is the builder for creating a KhumuUser entity.
type KhumuUserCreate struct {
	config
	mutation *KhumuUserMutation
	hooks    []Hook
}

// SetNickname sets the "nickname" field.
func (kuc *KhumuUserCreate) SetNickname(s string) *KhumuUserCreate {
	kuc.mutation.SetNickname(s)
	return kuc
}

// SetStatus sets the "status" field.
func (kuc *KhumuUserCreate) SetStatus(s string) *KhumuUserCreate {
	kuc.mutation.SetStatus(s)
	return kuc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (kuc *KhumuUserCreate) SetNillableStatus(s *string) *KhumuUserCreate {
	if s != nil {
		kuc.SetStatus(*s)
	}
	return kuc
}

// SetCreatedAt sets the "created_at" field.
func (kuc *KhumuUserCreate) SetCreatedAt(t time.Time) *KhumuUserCreate {
	kuc.mutation.SetCreatedAt(t)
	return kuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kuc *KhumuUserCreate) SetNillableCreatedAt(t *time.Time) *KhumuUserCreate {
	if t != nil {
		kuc.SetCreatedAt(*t)
	}
	return kuc
}

// SetID sets the "id" field.
func (kuc *KhumuUserCreate) SetID(s string) *KhumuUserCreate {
	kuc.mutation.SetID(s)
	return kuc
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (kuc *KhumuUserCreate) AddCommentIDs(ids ...int) *KhumuUserCreate {
	kuc.mutation.AddCommentIDs(ids...)
	return kuc
}

// AddComments adds the "comments" edges to the Comment entity.
func (kuc *KhumuUserCreate) AddComments(c ...*Comment) *KhumuUserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return kuc.AddCommentIDs(ids...)
}

// AddArticleIDs adds the "articles" edge to the Article entity by IDs.
func (kuc *KhumuUserCreate) AddArticleIDs(ids ...int) *KhumuUserCreate {
	kuc.mutation.AddArticleIDs(ids...)
	return kuc
}

// AddArticles adds the "articles" edges to the Article entity.
func (kuc *KhumuUserCreate) AddArticles(a ...*Article) *KhumuUserCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return kuc.AddArticleIDs(ids...)
}

// AddStudyArticleIDs adds the "studyArticles" edge to the StudyArticle entity by IDs.
func (kuc *KhumuUserCreate) AddStudyArticleIDs(ids ...int) *KhumuUserCreate {
	kuc.mutation.AddStudyArticleIDs(ids...)
	return kuc
}

// AddStudyArticles adds the "studyArticles" edges to the StudyArticle entity.
func (kuc *KhumuUserCreate) AddStudyArticles(s ...*StudyArticle) *KhumuUserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return kuc.AddStudyArticleIDs(ids...)
}

// AddLikeIDs adds the "like" edge to the LikeComment entity by IDs.
func (kuc *KhumuUserCreate) AddLikeIDs(ids ...int) *KhumuUserCreate {
	kuc.mutation.AddLikeIDs(ids...)
	return kuc
}

// AddLike adds the "like" edges to the LikeComment entity.
func (kuc *KhumuUserCreate) AddLike(l ...*LikeComment) *KhumuUserCreate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return kuc.AddLikeIDs(ids...)
}

// Mutation returns the KhumuUserMutation object of the builder.
func (kuc *KhumuUserCreate) Mutation() *KhumuUserMutation {
	return kuc.mutation
}

// Save creates the KhumuUser in the database.
func (kuc *KhumuUserCreate) Save(ctx context.Context) (*KhumuUser, error) {
	var (
		err  error
		node *KhumuUser
	)
	kuc.defaults()
	if len(kuc.hooks) == 0 {
		if err = kuc.check(); err != nil {
			return nil, err
		}
		node, err = kuc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KhumuUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kuc.check(); err != nil {
				return nil, err
			}
			kuc.mutation = mutation
			node, err = kuc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kuc.hooks) - 1; i >= 0; i-- {
			mut = kuc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kuc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kuc *KhumuUserCreate) SaveX(ctx context.Context) *KhumuUser {
	v, err := kuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (kuc *KhumuUserCreate) defaults() {
	if _, ok := kuc.mutation.Status(); !ok {
		v := khumuuser.DefaultStatus
		kuc.mutation.SetStatus(v)
	}
	if _, ok := kuc.mutation.CreatedAt(); !ok {
		v := khumuuser.DefaultCreatedAt()
		kuc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kuc *KhumuUserCreate) check() error {
	if _, ok := kuc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New("ent: missing required field \"nickname\"")}
	}
	if _, ok := kuc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := kuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (kuc *KhumuUserCreate) sqlSave(ctx context.Context) (*KhumuUser, error) {
	_node, _spec := kuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kuc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (kuc *KhumuUserCreate) createSpec() (*KhumuUser, *sqlgraph.CreateSpec) {
	var (
		_node = &KhumuUser{config: kuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: khumuuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: khumuuser.FieldID,
			},
		}
	)
	if id, ok := kuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kuc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: khumuuser.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := kuc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: khumuuser.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := kuc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: khumuuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := kuc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   khumuuser.CommentsTable,
			Columns: []string{khumuuser.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kuc.mutation.ArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   khumuuser.ArticlesTable,
			Columns: []string{khumuuser.ArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: article.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kuc.mutation.StudyArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   khumuuser.StudyArticlesTable,
			Columns: []string{khumuuser.StudyArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: studyarticle.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kuc.mutation.LikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   khumuuser.LikeTable,
			Columns: []string{khumuuser.LikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: likecomment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KhumuUserCreateBulk is the builder for creating many KhumuUser entities in bulk.
type KhumuUserCreateBulk struct {
	config
	builders []*KhumuUserCreate
}

// Save creates the KhumuUser entities in the database.
func (kucb *KhumuUserCreateBulk) Save(ctx context.Context) ([]*KhumuUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kucb.builders))
	nodes := make([]*KhumuUser, len(kucb.builders))
	mutators := make([]Mutator, len(kucb.builders))
	for i := range kucb.builders {
		func(i int, root context.Context) {
			builder := kucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KhumuUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kucb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kucb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kucb *KhumuUserCreateBulk) SaveX(ctx context.Context) []*KhumuUser {
	v, err := kucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
