// Code generated by entc, DO NOT EDIT.

package article

import (
	"time"
)

const (
	// Label holds the string label denoting the article type in the database.
	Label = "article"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// KhumuUserFieldID holds the string denoting the ID field of the KhumuUser.
	KhumuUserFieldID = "username"
	// Table holds the table name of the article in the database.
	Table = "article_article"
	// CommentsTable is the table the holds the comments relation/edge.
	CommentsTable = "comment_comment"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comment_comment"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "article_id"
	// AuthorTable is the table the holds the author relation/edge.
	AuthorTable = "article_article"
	// AuthorInverseTable is the table name for the KhumuUser entity.
	// It exists in this package in order to avoid circular dependency with the "khumuuser" package.
	AuthorInverseTable = "user_khumuuser"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "author_id"
)

// Columns holds all SQL columns for article fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldImages,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "article_article"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"author_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
