// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/khu-dev/khumu-comment/ent/article"
	"github.com/khu-dev/khumu-comment/ent/comment"
	"github.com/khu-dev/khumu-comment/ent/khumuuser"
	"github.com/khu-dev/khumu-comment/ent/likecomment"
	"github.com/khu-dev/khumu-comment/ent/predicate"
	"github.com/khu-dev/khumu-comment/ent/studyarticle"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle      = "Article"
	TypeComment      = "Comment"
	TypeKhumuUser    = "KhumuUser"
	TypeLikeComment  = "LikeComment"
	TypeStudyArticle = "StudyArticle"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op              Op
	typ             string
	id              *int
	created_at      *time.Time
	clearedFields   map[string]struct{}
	comments        map[int]struct{}
	removedcomments map[int]struct{}
	clearedcomments bool
	author          *string
	clearedauthor   bool
	done            bool
	oldValue        func(context.Context) (*Article, error)
	predicates      []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id int) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Article entities.
func (m *ArticleMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ArticleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ArticleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ArticleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ArticleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *ArticleMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *ArticleMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *ArticleMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *ArticleMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *ArticleMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *ArticleMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *ArticleMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// SetAuthorID sets the "author" edge to the KhumuUser entity by id.
func (m *ArticleMutation) SetAuthorID(id string) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the KhumuUser entity.
func (m *ArticleMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the KhumuUser entity was cleared.
func (m *ArticleMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *ArticleMutation) AuthorID() (id string, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *ArticleMutation) AuthorIDs() (ids []string) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *ArticleMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.created_at != nil {
		fields = append(fields, article.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.comments != nil {
		edges = append(edges, article.EdgeComments)
	}
	if m.author != nil {
		edges = append(edges, article.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case article.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcomments != nil {
		edges = append(edges, article.EdgeComments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcomments {
		edges = append(edges, article.EdgeComments)
	}
	if m.clearedauthor {
		edges = append(edges, article.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	switch name {
	case article.EdgeComments:
		return m.clearedcomments
	case article.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	switch name {
	case article.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	switch name {
	case article.EdgeComments:
		m.ResetComments()
		return nil
	case article.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown Article edge %s", name)
}

// CommentMutation represents an operation that mutates the Comment nodes in the graph.
type CommentMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	state               *string
	content             *string
	kind                *string
	created_at          *time.Time
	clearedFields       map[string]struct{}
	author              *string
	clearedauthor       bool
	article             *int
	clearedarticle      bool
	studyArticle        *int
	clearedstudyArticle bool
	parent              *int
	clearedparent       bool
	children            map[int]struct{}
	removedchildren     map[int]struct{}
	clearedchildren     bool
	like                map[int]struct{}
	removedlike         map[int]struct{}
	clearedlike         bool
	done                bool
	oldValue            func(context.Context) (*Comment, error)
	predicates          []predicate.Comment
}

var _ ent.Mutation = (*CommentMutation)(nil)

// commentOption allows management of the mutation configuration using functional options.
type commentOption func(*CommentMutation)

// newCommentMutation creates new mutation for the Comment entity.
func newCommentMutation(c config, op Op, opts ...commentOption) *CommentMutation {
	m := &CommentMutation{
		config:        c,
		op:            op,
		typ:           TypeComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommentID sets the ID field of the mutation.
func withCommentID(id int) commentOption {
	return func(m *CommentMutation) {
		var (
			err   error
			once  sync.Once
			value *Comment
		)
		m.oldValue = func(ctx context.Context) (*Comment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Comment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComment sets the old Comment of the mutation.
func withComment(node *Comment) commentOption {
	return func(m *CommentMutation) {
		m.oldValue = func(context.Context) (*Comment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Comment entities.
func (m *CommentMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *CommentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetState sets the "state" field.
func (m *CommentMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *CommentMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *CommentMutation) ResetState() {
	m.state = nil
}

// SetContent sets the "content" field.
func (m *CommentMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *CommentMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *CommentMutation) ResetContent() {
	m.content = nil
}

// SetKind sets the "kind" field.
func (m *CommentMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *CommentMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ResetKind resets all changes to the "kind" field.
func (m *CommentMutation) ResetKind() {
	m.kind = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CommentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CommentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Comment entity.
// If the Comment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CommentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetAuthorID sets the "author" edge to the KhumuUser entity by id.
func (m *CommentMutation) SetAuthorID(id string) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the KhumuUser entity.
func (m *CommentMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the KhumuUser entity was cleared.
func (m *CommentMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *CommentMutation) AuthorID() (id string, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) AuthorIDs() (ids []string) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *CommentMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// SetArticleID sets the "article" edge to the Article entity by id.
func (m *CommentMutation) SetArticleID(id int) {
	m.article = &id
}

// ClearArticle clears the "article" edge to the Article entity.
func (m *CommentMutation) ClearArticle() {
	m.clearedarticle = true
}

// ArticleCleared reports if the "article" edge to the Article entity was cleared.
func (m *CommentMutation) ArticleCleared() bool {
	return m.clearedarticle
}

// ArticleID returns the "article" edge ID in the mutation.
func (m *CommentMutation) ArticleID() (id int, exists bool) {
	if m.article != nil {
		return *m.article, true
	}
	return
}

// ArticleIDs returns the "article" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArticleID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) ArticleIDs() (ids []int) {
	if id := m.article; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArticle resets all changes to the "article" edge.
func (m *CommentMutation) ResetArticle() {
	m.article = nil
	m.clearedarticle = false
}

// SetStudyArticleID sets the "studyArticle" edge to the StudyArticle entity by id.
func (m *CommentMutation) SetStudyArticleID(id int) {
	m.studyArticle = &id
}

// ClearStudyArticle clears the "studyArticle" edge to the StudyArticle entity.
func (m *CommentMutation) ClearStudyArticle() {
	m.clearedstudyArticle = true
}

// StudyArticleCleared reports if the "studyArticle" edge to the StudyArticle entity was cleared.
func (m *CommentMutation) StudyArticleCleared() bool {
	return m.clearedstudyArticle
}

// StudyArticleID returns the "studyArticle" edge ID in the mutation.
func (m *CommentMutation) StudyArticleID() (id int, exists bool) {
	if m.studyArticle != nil {
		return *m.studyArticle, true
	}
	return
}

// StudyArticleIDs returns the "studyArticle" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StudyArticleID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) StudyArticleIDs() (ids []int) {
	if id := m.studyArticle; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudyArticle resets all changes to the "studyArticle" edge.
func (m *CommentMutation) ResetStudyArticle() {
	m.studyArticle = nil
	m.clearedstudyArticle = false
}

// SetParentID sets the "parent" edge to the Comment entity by id.
func (m *CommentMutation) SetParentID(id int) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Comment entity.
func (m *CommentMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Comment entity was cleared.
func (m *CommentMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *CommentMutation) ParentID() (id int, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *CommentMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *CommentMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Comment entity by ids.
func (m *CommentMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Comment entity.
func (m *CommentMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Comment entity was cleared.
func (m *CommentMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Comment entity by IDs.
func (m *CommentMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Comment entity.
func (m *CommentMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *CommentMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *CommentMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// AddLikeIDs adds the "like" edge to the LikeComment entity by ids.
func (m *CommentMutation) AddLikeIDs(ids ...int) {
	if m.like == nil {
		m.like = make(map[int]struct{})
	}
	for i := range ids {
		m.like[ids[i]] = struct{}{}
	}
}

// ClearLike clears the "like" edge to the LikeComment entity.
func (m *CommentMutation) ClearLike() {
	m.clearedlike = true
}

// LikeCleared reports if the "like" edge to the LikeComment entity was cleared.
func (m *CommentMutation) LikeCleared() bool {
	return m.clearedlike
}

// RemoveLikeIDs removes the "like" edge to the LikeComment entity by IDs.
func (m *CommentMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlike == nil {
		m.removedlike = make(map[int]struct{})
	}
	for i := range ids {
		m.removedlike[ids[i]] = struct{}{}
	}
}

// RemovedLike returns the removed IDs of the "like" edge to the LikeComment entity.
func (m *CommentMutation) RemovedLikeIDs() (ids []int) {
	for id := range m.removedlike {
		ids = append(ids, id)
	}
	return
}

// LikeIDs returns the "like" edge IDs in the mutation.
func (m *CommentMutation) LikeIDs() (ids []int) {
	for id := range m.like {
		ids = append(ids, id)
	}
	return
}

// ResetLike resets all changes to the "like" edge.
func (m *CommentMutation) ResetLike() {
	m.like = nil
	m.clearedlike = false
	m.removedlike = nil
}

// Op returns the operation name.
func (m *CommentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Comment).
func (m *CommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.state != nil {
		fields = append(fields, comment.FieldState)
	}
	if m.content != nil {
		fields = append(fields, comment.FieldContent)
	}
	if m.kind != nil {
		fields = append(fields, comment.FieldKind)
	}
	if m.created_at != nil {
		fields = append(fields, comment.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case comment.FieldState:
		return m.State()
	case comment.FieldContent:
		return m.Content()
	case comment.FieldKind:
		return m.Kind()
	case comment.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case comment.FieldState:
		return m.OldState(ctx)
	case comment.FieldContent:
		return m.OldContent(ctx)
	case comment.FieldKind:
		return m.OldKind(ctx)
	case comment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Comment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case comment.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case comment.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case comment.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case comment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Comment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Comment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommentMutation) ResetField(name string) error {
	switch name {
	case comment.FieldState:
		m.ResetState()
		return nil
	case comment.FieldContent:
		m.ResetContent()
		return nil
	case comment.FieldKind:
		m.ResetKind()
		return nil
	case comment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Comment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.author != nil {
		edges = append(edges, comment.EdgeAuthor)
	}
	if m.article != nil {
		edges = append(edges, comment.EdgeArticle)
	}
	if m.studyArticle != nil {
		edges = append(edges, comment.EdgeStudyArticle)
	}
	if m.parent != nil {
		edges = append(edges, comment.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, comment.EdgeChildren)
	}
	if m.like != nil {
		edges = append(edges, comment.EdgeLike)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case comment.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeArticle:
		if id := m.article; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeStudyArticle:
		if id := m.studyArticle; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case comment.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case comment.EdgeLike:
		ids := make([]ent.Value, 0, len(m.like))
		for id := range m.like {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedchildren != nil {
		edges = append(edges, comment.EdgeChildren)
	}
	if m.removedlike != nil {
		edges = append(edges, comment.EdgeLike)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case comment.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case comment.EdgeLike:
		ids := make([]ent.Value, 0, len(m.removedlike))
		for id := range m.removedlike {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedauthor {
		edges = append(edges, comment.EdgeAuthor)
	}
	if m.clearedarticle {
		edges = append(edges, comment.EdgeArticle)
	}
	if m.clearedstudyArticle {
		edges = append(edges, comment.EdgeStudyArticle)
	}
	if m.clearedparent {
		edges = append(edges, comment.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, comment.EdgeChildren)
	}
	if m.clearedlike {
		edges = append(edges, comment.EdgeLike)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommentMutation) EdgeCleared(name string) bool {
	switch name {
	case comment.EdgeAuthor:
		return m.clearedauthor
	case comment.EdgeArticle:
		return m.clearedarticle
	case comment.EdgeStudyArticle:
		return m.clearedstudyArticle
	case comment.EdgeParent:
		return m.clearedparent
	case comment.EdgeChildren:
		return m.clearedchildren
	case comment.EdgeLike:
		return m.clearedlike
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommentMutation) ClearEdge(name string) error {
	switch name {
	case comment.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case comment.EdgeArticle:
		m.ClearArticle()
		return nil
	case comment.EdgeStudyArticle:
		m.ClearStudyArticle()
		return nil
	case comment.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Comment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommentMutation) ResetEdge(name string) error {
	switch name {
	case comment.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case comment.EdgeArticle:
		m.ResetArticle()
		return nil
	case comment.EdgeStudyArticle:
		m.ResetStudyArticle()
		return nil
	case comment.EdgeParent:
		m.ResetParent()
		return nil
	case comment.EdgeChildren:
		m.ResetChildren()
		return nil
	case comment.EdgeLike:
		m.ResetLike()
		return nil
	}
	return fmt.Errorf("unknown Comment edge %s", name)
}

// KhumuUserMutation represents an operation that mutates the KhumuUser nodes in the graph.
type KhumuUserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	nickname             *string
	status               *string
	clearedFields        map[string]struct{}
	comments             map[int]struct{}
	removedcomments      map[int]struct{}
	clearedcomments      bool
	articles             map[int]struct{}
	removedarticles      map[int]struct{}
	clearedarticles      bool
	studyArticles        map[int]struct{}
	removedstudyArticles map[int]struct{}
	clearedstudyArticles bool
	like                 map[int]struct{}
	removedlike          map[int]struct{}
	clearedlike          bool
	done                 bool
	oldValue             func(context.Context) (*KhumuUser, error)
	predicates           []predicate.KhumuUser
}

var _ ent.Mutation = (*KhumuUserMutation)(nil)

// khumuuserOption allows management of the mutation configuration using functional options.
type khumuuserOption func(*KhumuUserMutation)

// newKhumuUserMutation creates new mutation for the KhumuUser entity.
func newKhumuUserMutation(c config, op Op, opts ...khumuuserOption) *KhumuUserMutation {
	m := &KhumuUserMutation{
		config:        c,
		op:            op,
		typ:           TypeKhumuUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKhumuUserID sets the ID field of the mutation.
func withKhumuUserID(id string) khumuuserOption {
	return func(m *KhumuUserMutation) {
		var (
			err   error
			once  sync.Once
			value *KhumuUser
		)
		m.oldValue = func(ctx context.Context) (*KhumuUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().KhumuUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKhumuUser sets the old KhumuUser of the mutation.
func withKhumuUser(node *KhumuUser) khumuuserOption {
	return func(m *KhumuUserMutation) {
		m.oldValue = func(context.Context) (*KhumuUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KhumuUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KhumuUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of KhumuUser entities.
func (m *KhumuUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *KhumuUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNickname sets the "nickname" field.
func (m *KhumuUserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *KhumuUserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the KhumuUser entity.
// If the KhumuUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KhumuUserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *KhumuUserMutation) ResetNickname() {
	m.nickname = nil
}

// SetStatus sets the "status" field.
func (m *KhumuUserMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *KhumuUserMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the KhumuUser entity.
// If the KhumuUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KhumuUserMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *KhumuUserMutation) ResetStatus() {
	m.status = nil
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *KhumuUserMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *KhumuUserMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *KhumuUserMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *KhumuUserMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *KhumuUserMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *KhumuUserMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *KhumuUserMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// AddArticleIDs adds the "articles" edge to the Article entity by ids.
func (m *KhumuUserMutation) AddArticleIDs(ids ...int) {
	if m.articles == nil {
		m.articles = make(map[int]struct{})
	}
	for i := range ids {
		m.articles[ids[i]] = struct{}{}
	}
}

// ClearArticles clears the "articles" edge to the Article entity.
func (m *KhumuUserMutation) ClearArticles() {
	m.clearedarticles = true
}

// ArticlesCleared reports if the "articles" edge to the Article entity was cleared.
func (m *KhumuUserMutation) ArticlesCleared() bool {
	return m.clearedarticles
}

// RemoveArticleIDs removes the "articles" edge to the Article entity by IDs.
func (m *KhumuUserMutation) RemoveArticleIDs(ids ...int) {
	if m.removedarticles == nil {
		m.removedarticles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedarticles[ids[i]] = struct{}{}
	}
}

// RemovedArticles returns the removed IDs of the "articles" edge to the Article entity.
func (m *KhumuUserMutation) RemovedArticlesIDs() (ids []int) {
	for id := range m.removedarticles {
		ids = append(ids, id)
	}
	return
}

// ArticlesIDs returns the "articles" edge IDs in the mutation.
func (m *KhumuUserMutation) ArticlesIDs() (ids []int) {
	for id := range m.articles {
		ids = append(ids, id)
	}
	return
}

// ResetArticles resets all changes to the "articles" edge.
func (m *KhumuUserMutation) ResetArticles() {
	m.articles = nil
	m.clearedarticles = false
	m.removedarticles = nil
}

// AddStudyArticleIDs adds the "studyArticles" edge to the StudyArticle entity by ids.
func (m *KhumuUserMutation) AddStudyArticleIDs(ids ...int) {
	if m.studyArticles == nil {
		m.studyArticles = make(map[int]struct{})
	}
	for i := range ids {
		m.studyArticles[ids[i]] = struct{}{}
	}
}

// ClearStudyArticles clears the "studyArticles" edge to the StudyArticle entity.
func (m *KhumuUserMutation) ClearStudyArticles() {
	m.clearedstudyArticles = true
}

// StudyArticlesCleared reports if the "studyArticles" edge to the StudyArticle entity was cleared.
func (m *KhumuUserMutation) StudyArticlesCleared() bool {
	return m.clearedstudyArticles
}

// RemoveStudyArticleIDs removes the "studyArticles" edge to the StudyArticle entity by IDs.
func (m *KhumuUserMutation) RemoveStudyArticleIDs(ids ...int) {
	if m.removedstudyArticles == nil {
		m.removedstudyArticles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedstudyArticles[ids[i]] = struct{}{}
	}
}

// RemovedStudyArticles returns the removed IDs of the "studyArticles" edge to the StudyArticle entity.
func (m *KhumuUserMutation) RemovedStudyArticlesIDs() (ids []int) {
	for id := range m.removedstudyArticles {
		ids = append(ids, id)
	}
	return
}

// StudyArticlesIDs returns the "studyArticles" edge IDs in the mutation.
func (m *KhumuUserMutation) StudyArticlesIDs() (ids []int) {
	for id := range m.studyArticles {
		ids = append(ids, id)
	}
	return
}

// ResetStudyArticles resets all changes to the "studyArticles" edge.
func (m *KhumuUserMutation) ResetStudyArticles() {
	m.studyArticles = nil
	m.clearedstudyArticles = false
	m.removedstudyArticles = nil
}

// AddLikeIDs adds the "like" edge to the LikeComment entity by ids.
func (m *KhumuUserMutation) AddLikeIDs(ids ...int) {
	if m.like == nil {
		m.like = make(map[int]struct{})
	}
	for i := range ids {
		m.like[ids[i]] = struct{}{}
	}
}

// ClearLike clears the "like" edge to the LikeComment entity.
func (m *KhumuUserMutation) ClearLike() {
	m.clearedlike = true
}

// LikeCleared reports if the "like" edge to the LikeComment entity was cleared.
func (m *KhumuUserMutation) LikeCleared() bool {
	return m.clearedlike
}

// RemoveLikeIDs removes the "like" edge to the LikeComment entity by IDs.
func (m *KhumuUserMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlike == nil {
		m.removedlike = make(map[int]struct{})
	}
	for i := range ids {
		m.removedlike[ids[i]] = struct{}{}
	}
}

// RemovedLike returns the removed IDs of the "like" edge to the LikeComment entity.
func (m *KhumuUserMutation) RemovedLikeIDs() (ids []int) {
	for id := range m.removedlike {
		ids = append(ids, id)
	}
	return
}

// LikeIDs returns the "like" edge IDs in the mutation.
func (m *KhumuUserMutation) LikeIDs() (ids []int) {
	for id := range m.like {
		ids = append(ids, id)
	}
	return
}

// ResetLike resets all changes to the "like" edge.
func (m *KhumuUserMutation) ResetLike() {
	m.like = nil
	m.clearedlike = false
	m.removedlike = nil
}

// Op returns the operation name.
func (m *KhumuUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (KhumuUser).
func (m *KhumuUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KhumuUserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.nickname != nil {
		fields = append(fields, khumuuser.FieldNickname)
	}
	if m.status != nil {
		fields = append(fields, khumuuser.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KhumuUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case khumuuser.FieldNickname:
		return m.Nickname()
	case khumuuser.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KhumuUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case khumuuser.FieldNickname:
		return m.OldNickname(ctx)
	case khumuuser.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown KhumuUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KhumuUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case khumuuser.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case khumuuser.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown KhumuUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KhumuUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KhumuUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KhumuUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown KhumuUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KhumuUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KhumuUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KhumuUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown KhumuUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KhumuUserMutation) ResetField(name string) error {
	switch name {
	case khumuuser.FieldNickname:
		m.ResetNickname()
		return nil
	case khumuuser.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown KhumuUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KhumuUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.comments != nil {
		edges = append(edges, khumuuser.EdgeComments)
	}
	if m.articles != nil {
		edges = append(edges, khumuuser.EdgeArticles)
	}
	if m.studyArticles != nil {
		edges = append(edges, khumuuser.EdgeStudyArticles)
	}
	if m.like != nil {
		edges = append(edges, khumuuser.EdgeLike)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KhumuUserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case khumuuser.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case khumuuser.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.articles))
		for id := range m.articles {
			ids = append(ids, id)
		}
		return ids
	case khumuuser.EdgeStudyArticles:
		ids := make([]ent.Value, 0, len(m.studyArticles))
		for id := range m.studyArticles {
			ids = append(ids, id)
		}
		return ids
	case khumuuser.EdgeLike:
		ids := make([]ent.Value, 0, len(m.like))
		for id := range m.like {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KhumuUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedcomments != nil {
		edges = append(edges, khumuuser.EdgeComments)
	}
	if m.removedarticles != nil {
		edges = append(edges, khumuuser.EdgeArticles)
	}
	if m.removedstudyArticles != nil {
		edges = append(edges, khumuuser.EdgeStudyArticles)
	}
	if m.removedlike != nil {
		edges = append(edges, khumuuser.EdgeLike)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KhumuUserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case khumuuser.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	case khumuuser.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.removedarticles))
		for id := range m.removedarticles {
			ids = append(ids, id)
		}
		return ids
	case khumuuser.EdgeStudyArticles:
		ids := make([]ent.Value, 0, len(m.removedstudyArticles))
		for id := range m.removedstudyArticles {
			ids = append(ids, id)
		}
		return ids
	case khumuuser.EdgeLike:
		ids := make([]ent.Value, 0, len(m.removedlike))
		for id := range m.removedlike {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KhumuUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedcomments {
		edges = append(edges, khumuuser.EdgeComments)
	}
	if m.clearedarticles {
		edges = append(edges, khumuuser.EdgeArticles)
	}
	if m.clearedstudyArticles {
		edges = append(edges, khumuuser.EdgeStudyArticles)
	}
	if m.clearedlike {
		edges = append(edges, khumuuser.EdgeLike)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KhumuUserMutation) EdgeCleared(name string) bool {
	switch name {
	case khumuuser.EdgeComments:
		return m.clearedcomments
	case khumuuser.EdgeArticles:
		return m.clearedarticles
	case khumuuser.EdgeStudyArticles:
		return m.clearedstudyArticles
	case khumuuser.EdgeLike:
		return m.clearedlike
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KhumuUserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown KhumuUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KhumuUserMutation) ResetEdge(name string) error {
	switch name {
	case khumuuser.EdgeComments:
		m.ResetComments()
		return nil
	case khumuuser.EdgeArticles:
		m.ResetArticles()
		return nil
	case khumuuser.EdgeStudyArticles:
		m.ResetStudyArticles()
		return nil
	case khumuuser.EdgeLike:
		m.ResetLike()
		return nil
	}
	return fmt.Errorf("unknown KhumuUser edge %s", name)
}

// LikeCommentMutation represents an operation that mutates the LikeComment nodes in the graph.
type LikeCommentMutation struct {
	config
	op             Op
	typ            string
	id             *int
	clearedFields  map[string]struct{}
	likedBy        *string
	clearedlikedBy bool
	about          *int
	clearedabout   bool
	done           bool
	oldValue       func(context.Context) (*LikeComment, error)
	predicates     []predicate.LikeComment
}

var _ ent.Mutation = (*LikeCommentMutation)(nil)

// likecommentOption allows management of the mutation configuration using functional options.
type likecommentOption func(*LikeCommentMutation)

// newLikeCommentMutation creates new mutation for the LikeComment entity.
func newLikeCommentMutation(c config, op Op, opts ...likecommentOption) *LikeCommentMutation {
	m := &LikeCommentMutation{
		config:        c,
		op:            op,
		typ:           TypeLikeComment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLikeCommentID sets the ID field of the mutation.
func withLikeCommentID(id int) likecommentOption {
	return func(m *LikeCommentMutation) {
		var (
			err   error
			once  sync.Once
			value *LikeComment
		)
		m.oldValue = func(ctx context.Context) (*LikeComment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LikeComment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLikeComment sets the old LikeComment of the mutation.
func withLikeComment(node *LikeComment) likecommentOption {
	return func(m *LikeCommentMutation) {
		m.oldValue = func(context.Context) (*LikeComment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LikeCommentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LikeCommentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LikeComment entities.
func (m *LikeCommentMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *LikeCommentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLikedByID sets the "likedBy" edge to the KhumuUser entity by id.
func (m *LikeCommentMutation) SetLikedByID(id string) {
	m.likedBy = &id
}

// ClearLikedBy clears the "likedBy" edge to the KhumuUser entity.
func (m *LikeCommentMutation) ClearLikedBy() {
	m.clearedlikedBy = true
}

// LikedByCleared reports if the "likedBy" edge to the KhumuUser entity was cleared.
func (m *LikeCommentMutation) LikedByCleared() bool {
	return m.clearedlikedBy
}

// LikedByID returns the "likedBy" edge ID in the mutation.
func (m *LikeCommentMutation) LikedByID() (id string, exists bool) {
	if m.likedBy != nil {
		return *m.likedBy, true
	}
	return
}

// LikedByIDs returns the "likedBy" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LikedByID instead. It exists only for internal usage by the builders.
func (m *LikeCommentMutation) LikedByIDs() (ids []string) {
	if id := m.likedBy; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLikedBy resets all changes to the "likedBy" edge.
func (m *LikeCommentMutation) ResetLikedBy() {
	m.likedBy = nil
	m.clearedlikedBy = false
}

// SetAboutID sets the "about" edge to the Comment entity by id.
func (m *LikeCommentMutation) SetAboutID(id int) {
	m.about = &id
}

// ClearAbout clears the "about" edge to the Comment entity.
func (m *LikeCommentMutation) ClearAbout() {
	m.clearedabout = true
}

// AboutCleared reports if the "about" edge to the Comment entity was cleared.
func (m *LikeCommentMutation) AboutCleared() bool {
	return m.clearedabout
}

// AboutID returns the "about" edge ID in the mutation.
func (m *LikeCommentMutation) AboutID() (id int, exists bool) {
	if m.about != nil {
		return *m.about, true
	}
	return
}

// AboutIDs returns the "about" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AboutID instead. It exists only for internal usage by the builders.
func (m *LikeCommentMutation) AboutIDs() (ids []int) {
	if id := m.about; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAbout resets all changes to the "about" edge.
func (m *LikeCommentMutation) ResetAbout() {
	m.about = nil
	m.clearedabout = false
}

// Op returns the operation name.
func (m *LikeCommentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (LikeComment).
func (m *LikeCommentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LikeCommentMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LikeCommentMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LikeCommentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown LikeComment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeCommentMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LikeComment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LikeCommentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LikeCommentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LikeCommentMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown LikeComment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LikeCommentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LikeCommentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LikeCommentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LikeComment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LikeCommentMutation) ResetField(name string) error {
	return fmt.Errorf("unknown LikeComment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LikeCommentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.likedBy != nil {
		edges = append(edges, likecomment.EdgeLikedBy)
	}
	if m.about != nil {
		edges = append(edges, likecomment.EdgeAbout)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LikeCommentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case likecomment.EdgeLikedBy:
		if id := m.likedBy; id != nil {
			return []ent.Value{*id}
		}
	case likecomment.EdgeAbout:
		if id := m.about; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LikeCommentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LikeCommentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LikeCommentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlikedBy {
		edges = append(edges, likecomment.EdgeLikedBy)
	}
	if m.clearedabout {
		edges = append(edges, likecomment.EdgeAbout)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LikeCommentMutation) EdgeCleared(name string) bool {
	switch name {
	case likecomment.EdgeLikedBy:
		return m.clearedlikedBy
	case likecomment.EdgeAbout:
		return m.clearedabout
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LikeCommentMutation) ClearEdge(name string) error {
	switch name {
	case likecomment.EdgeLikedBy:
		m.ClearLikedBy()
		return nil
	case likecomment.EdgeAbout:
		m.ClearAbout()
		return nil
	}
	return fmt.Errorf("unknown LikeComment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LikeCommentMutation) ResetEdge(name string) error {
	switch name {
	case likecomment.EdgeLikedBy:
		m.ResetLikedBy()
		return nil
	case likecomment.EdgeAbout:
		m.ResetAbout()
		return nil
	}
	return fmt.Errorf("unknown LikeComment edge %s", name)
}

// StudyArticleMutation represents an operation that mutates the StudyArticle nodes in the graph.
type StudyArticleMutation struct {
	config
	op              Op
	typ             string
	id              *int
	clearedFields   map[string]struct{}
	comments        map[int]struct{}
	removedcomments map[int]struct{}
	clearedcomments bool
	author          *string
	clearedauthor   bool
	done            bool
	oldValue        func(context.Context) (*StudyArticle, error)
	predicates      []predicate.StudyArticle
}

var _ ent.Mutation = (*StudyArticleMutation)(nil)

// studyarticleOption allows management of the mutation configuration using functional options.
type studyarticleOption func(*StudyArticleMutation)

// newStudyArticleMutation creates new mutation for the StudyArticle entity.
func newStudyArticleMutation(c config, op Op, opts ...studyarticleOption) *StudyArticleMutation {
	m := &StudyArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeStudyArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudyArticleID sets the ID field of the mutation.
func withStudyArticleID(id int) studyarticleOption {
	return func(m *StudyArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *StudyArticle
		)
		m.oldValue = func(ctx context.Context) (*StudyArticle, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudyArticle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudyArticle sets the old StudyArticle of the mutation.
func withStudyArticle(node *StudyArticle) studyarticleOption {
	return func(m *StudyArticleMutation) {
		m.oldValue = func(context.Context) (*StudyArticle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudyArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudyArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StudyArticle entities.
func (m *StudyArticleMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *StudyArticleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// AddCommentIDs adds the "comments" edge to the Comment entity by ids.
func (m *StudyArticleMutation) AddCommentIDs(ids ...int) {
	if m.comments == nil {
		m.comments = make(map[int]struct{})
	}
	for i := range ids {
		m.comments[ids[i]] = struct{}{}
	}
}

// ClearComments clears the "comments" edge to the Comment entity.
func (m *StudyArticleMutation) ClearComments() {
	m.clearedcomments = true
}

// CommentsCleared reports if the "comments" edge to the Comment entity was cleared.
func (m *StudyArticleMutation) CommentsCleared() bool {
	return m.clearedcomments
}

// RemoveCommentIDs removes the "comments" edge to the Comment entity by IDs.
func (m *StudyArticleMutation) RemoveCommentIDs(ids ...int) {
	if m.removedcomments == nil {
		m.removedcomments = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcomments[ids[i]] = struct{}{}
	}
}

// RemovedComments returns the removed IDs of the "comments" edge to the Comment entity.
func (m *StudyArticleMutation) RemovedCommentsIDs() (ids []int) {
	for id := range m.removedcomments {
		ids = append(ids, id)
	}
	return
}

// CommentsIDs returns the "comments" edge IDs in the mutation.
func (m *StudyArticleMutation) CommentsIDs() (ids []int) {
	for id := range m.comments {
		ids = append(ids, id)
	}
	return
}

// ResetComments resets all changes to the "comments" edge.
func (m *StudyArticleMutation) ResetComments() {
	m.comments = nil
	m.clearedcomments = false
	m.removedcomments = nil
}

// SetAuthorID sets the "author" edge to the KhumuUser entity by id.
func (m *StudyArticleMutation) SetAuthorID(id string) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the KhumuUser entity.
func (m *StudyArticleMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the KhumuUser entity was cleared.
func (m *StudyArticleMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *StudyArticleMutation) AuthorID() (id string, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *StudyArticleMutation) AuthorIDs() (ids []string) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *StudyArticleMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// Op returns the operation name.
func (m *StudyArticleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StudyArticle).
func (m *StudyArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudyArticleMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudyArticleMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudyArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown StudyArticle field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudyArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudyArticle field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudyArticleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudyArticleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudyArticleMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown StudyArticle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudyArticleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudyArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudyArticleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudyArticle nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudyArticleMutation) ResetField(name string) error {
	return fmt.Errorf("unknown StudyArticle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudyArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.comments != nil {
		edges = append(edges, studyarticle.EdgeComments)
	}
	if m.author != nil {
		edges = append(edges, studyarticle.EdgeAuthor)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudyArticleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case studyarticle.EdgeComments:
		ids := make([]ent.Value, 0, len(m.comments))
		for id := range m.comments {
			ids = append(ids, id)
		}
		return ids
	case studyarticle.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudyArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcomments != nil {
		edges = append(edges, studyarticle.EdgeComments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudyArticleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case studyarticle.EdgeComments:
		ids := make([]ent.Value, 0, len(m.removedcomments))
		for id := range m.removedcomments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudyArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcomments {
		edges = append(edges, studyarticle.EdgeComments)
	}
	if m.clearedauthor {
		edges = append(edges, studyarticle.EdgeAuthor)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudyArticleMutation) EdgeCleared(name string) bool {
	switch name {
	case studyarticle.EdgeComments:
		return m.clearedcomments
	case studyarticle.EdgeAuthor:
		return m.clearedauthor
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudyArticleMutation) ClearEdge(name string) error {
	switch name {
	case studyarticle.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown StudyArticle unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudyArticleMutation) ResetEdge(name string) error {
	switch name {
	case studyarticle.EdgeComments:
		m.ResetComments()
		return nil
	case studyarticle.EdgeAuthor:
		m.ResetAuthor()
		return nil
	}
	return fmt.Errorf("unknown StudyArticle edge %s", name)
}
