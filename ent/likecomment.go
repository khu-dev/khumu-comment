// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/khu-dev/khumu-comment/ent/comment"
	"github.com/khu-dev/khumu-comment/ent/khumuuser"
	"github.com/khu-dev/khumu-comment/ent/likecomment"
)

// LikeComment is the model entity for the LikeComment schema.
type LikeComment struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LikeCommentQuery when eager-loading is set.
	Edges      LikeCommentEdges `json:"edges"`
	comment_id *int
	user_id    *string
}

// LikeCommentEdges holds the relations/edges for other nodes in the graph.
type LikeCommentEdges struct {
	// LikedBy holds the value of the likedBy edge.
	LikedBy *KhumuUser `json:"likedBy,omitempty"`
	// About holds the value of the about edge.
	About *Comment `json:"about,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// LikedByOrErr returns the LikedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeCommentEdges) LikedByOrErr() (*KhumuUser, error) {
	if e.loadedTypes[0] {
		if e.LikedBy == nil {
			// The edge likedBy was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: khumuuser.Label}
		}
		return e.LikedBy, nil
	}
	return nil, &NotLoadedError{edge: "likedBy"}
}

// AboutOrErr returns the About value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LikeCommentEdges) AboutOrErr() (*Comment, error) {
	if e.loadedTypes[1] {
		if e.About == nil {
			// The edge about was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: comment.Label}
		}
		return e.About, nil
	}
	return nil, &NotLoadedError{edge: "about"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LikeComment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case likecomment.FieldID:
			values[i] = new(sql.NullInt64)
		case likecomment.ForeignKeys[0]: // comment_id
			values[i] = new(sql.NullInt64)
		case likecomment.ForeignKeys[1]: // user_id
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LikeComment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LikeComment fields.
func (lc *LikeComment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case likecomment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lc.ID = int(value.Int64)
		case likecomment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field comment_id", value)
			} else if value.Valid {
				lc.comment_id = new(int)
				*lc.comment_id = int(value.Int64)
			}
		case likecomment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				lc.user_id = new(string)
				*lc.user_id = value.String
			}
		}
	}
	return nil
}

// QueryLikedBy queries the "likedBy" edge of the LikeComment entity.
func (lc *LikeComment) QueryLikedBy() *KhumuUserQuery {
	return (&LikeCommentClient{config: lc.config}).QueryLikedBy(lc)
}

// QueryAbout queries the "about" edge of the LikeComment entity.
func (lc *LikeComment) QueryAbout() *CommentQuery {
	return (&LikeCommentClient{config: lc.config}).QueryAbout(lc)
}

// Update returns a builder for updating this LikeComment.
// Note that you need to call LikeComment.Unwrap() before calling this method if this LikeComment
// was returned from a transaction, and the transaction was committed or rolled back.
func (lc *LikeComment) Update() *LikeCommentUpdateOne {
	return (&LikeCommentClient{config: lc.config}).UpdateOne(lc)
}

// Unwrap unwraps the LikeComment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lc *LikeComment) Unwrap() *LikeComment {
	tx, ok := lc.config.driver.(*txDriver)
	if !ok {
		panic("ent: LikeComment is not a transactional entity")
	}
	lc.config.driver = tx.drv
	return lc
}

// String implements the fmt.Stringer.
func (lc *LikeComment) String() string {
	var builder strings.Builder
	builder.WriteString("LikeComment(")
	builder.WriteString(fmt.Sprintf("id=%v", lc.ID))
	builder.WriteByte(')')
	return builder.String()
}

// LikeComments is a parsable slice of LikeComment.
type LikeComments []*LikeComment

func (lc LikeComments) config(cfg config) {
	for _i := range lc {
		lc[_i].config = cfg
	}
}
