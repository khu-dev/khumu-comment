// Code generated by MockGen. DO NOT EDIT.
// Source: repository/cache.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/khu-dev/khumu-comment/data"
)

// MockCommentCacheRepository is a mock of CommentCacheRepository interface.
type MockCommentCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentCacheRepositoryMockRecorder
}

// MockCommentCacheRepositoryMockRecorder is the mock recorder for MockCommentCacheRepository.
type MockCommentCacheRepositoryMockRecorder struct {
	mock *MockCommentCacheRepository
}

// NewMockCommentCacheRepository creates a new mock instance.
func NewMockCommentCacheRepository(ctrl *gomock.Controller) *MockCommentCacheRepository {
	mock := &MockCommentCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCommentCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentCacheRepository) EXPECT() *MockCommentCacheRepositoryMockRecorder {
	return m.recorder
}

// FindAllParentCommentsByArticleID mocks base method.
func (m *MockCommentCacheRepository) FindAllParentCommentsByArticleID(articleID int) (data.CommentEntities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllParentCommentsByArticleID", articleID)
	ret0, _ := ret[0].(data.CommentEntities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllParentCommentsByArticleID indicates an expected call of FindAllParentCommentsByArticleID.
func (mr *MockCommentCacheRepositoryMockRecorder) FindAllParentCommentsByArticleID(articleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllParentCommentsByArticleID", reflect.TypeOf((*MockCommentCacheRepository)(nil).FindAllParentCommentsByArticleID), articleID)
}

// SetCommentsByArticleID mocks base method.
func (m *MockCommentCacheRepository) SetCommentsByArticleID(articleID int, coms data.CommentEntities) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommentsByArticleID", articleID, coms)
}

// SetCommentsByArticleID indicates an expected call of SetCommentsByArticleID.
func (mr *MockCommentCacheRepositoryMockRecorder) SetCommentsByArticleID(articleID, coms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommentsByArticleID", reflect.TypeOf((*MockCommentCacheRepository)(nil).SetCommentsByArticleID), articleID, coms)
}

// MockLikeCommentCacheRepository is a mock of LikeCommentCacheRepository interface.
type MockLikeCommentCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLikeCommentCacheRepositoryMockRecorder
}

// MockLikeCommentCacheRepositoryMockRecorder is the mock recorder for MockLikeCommentCacheRepository.
type MockLikeCommentCacheRepositoryMockRecorder struct {
	mock *MockLikeCommentCacheRepository
}

// NewMockLikeCommentCacheRepository creates a new mock instance.
func NewMockLikeCommentCacheRepository(ctrl *gomock.Controller) *MockLikeCommentCacheRepository {
	mock := &MockLikeCommentCacheRepository{ctrl: ctrl}
	mock.recorder = &MockLikeCommentCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeCommentCacheRepository) EXPECT() *MockLikeCommentCacheRepositoryMockRecorder {
	return m.recorder
}

// FindAllByCommentID mocks base method.
func (m *MockLikeCommentCacheRepository) FindAllByCommentID(commentID int) (data.LikeCommentEntities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByCommentID", commentID)
	ret0, _ := ret[0].(data.LikeCommentEntities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByCommentID indicates an expected call of FindAllByCommentID.
func (mr *MockLikeCommentCacheRepositoryMockRecorder) FindAllByCommentID(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByCommentID", reflect.TypeOf((*MockLikeCommentCacheRepository)(nil).FindAllByCommentID), commentID)
}

// SetLikesByCommentID mocks base method.
func (m *MockLikeCommentCacheRepository) SetLikesByCommentID(commentID int, likes data.LikeCommentEntities) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLikesByCommentID", commentID, likes)
}

// SetLikesByCommentID indicates an expected call of SetLikesByCommentID.
func (mr *MockLikeCommentCacheRepositoryMockRecorder) SetLikesByCommentID(commentID, likes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLikesByCommentID", reflect.TypeOf((*MockLikeCommentCacheRepository)(nil).SetLikesByCommentID), commentID, likes)
}
