// Code generated by MockGen. DO NOT EDIT.
// Source: repository/likecomment.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/khu-dev/khumu-comment/data"
	ent "github.com/khu-dev/khumu-comment/ent"
)

// MockLikeCommentRepository is a mock of LikeCommentRepository interface.
type MockLikeCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLikeCommentRepositoryMockRecorder
}

// MockLikeCommentRepositoryMockRecorder is the mock recorder for MockLikeCommentRepository.
type MockLikeCommentRepositoryMockRecorder struct {
	mock *MockLikeCommentRepository
}

// NewMockLikeCommentRepository creates a new mock instance.
func NewMockLikeCommentRepository(ctrl *gomock.Controller) *MockLikeCommentRepository {
	mock := &MockLikeCommentRepository{ctrl: ctrl}
	mock.recorder = &MockLikeCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeCommentRepository) EXPECT() *MockLikeCommentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLikeCommentRepository) Create(createInput *data.LikeCommentInput) (*ent.LikeComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", createInput)
	ret0, _ := ret[0].(*ent.LikeComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLikeCommentRepositoryMockRecorder) Create(createInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLikeCommentRepository)(nil).Create), createInput)
}

// Delete mocks base method.
func (m *MockLikeCommentRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLikeCommentRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLikeCommentRepository)(nil).Delete), id)
}

// DeleteAllByCommentID mocks base method.
func (m *MockLikeCommentRepository) DeleteAllByCommentID(commentID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllByCommentID", commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllByCommentID indicates an expected call of DeleteAllByCommentID.
func (mr *MockLikeCommentRepositoryMockRecorder) DeleteAllByCommentID(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllByCommentID", reflect.TypeOf((*MockLikeCommentRepository)(nil).DeleteAllByCommentID), commentID)
}

// FindAllByCommentID mocks base method.
func (m *MockLikeCommentRepository) FindAllByCommentID(commentID int) ([]*ent.LikeComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByCommentID", commentID)
	ret0, _ := ret[0].([]*ent.LikeComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByCommentID indicates an expected call of FindAllByCommentID.
func (mr *MockLikeCommentRepositoryMockRecorder) FindAllByCommentID(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByCommentID", reflect.TypeOf((*MockLikeCommentRepository)(nil).FindAllByCommentID), commentID)
}

// FindAllByUserIDAndCommentID mocks base method.
func (m *MockLikeCommentRepository) FindAllByUserIDAndCommentID(authorID string, commentID int) ([]*ent.LikeComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByUserIDAndCommentID", authorID, commentID)
	ret0, _ := ret[0].([]*ent.LikeComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByUserIDAndCommentID indicates an expected call of FindAllByUserIDAndCommentID.
func (mr *MockLikeCommentRepositoryMockRecorder) FindAllByUserIDAndCommentID(authorID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByUserIDAndCommentID", reflect.TypeOf((*MockLikeCommentRepository)(nil).FindAllByUserIDAndCommentID), authorID, commentID)
}
