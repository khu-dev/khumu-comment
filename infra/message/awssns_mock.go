// Code generated by MockGen. DO NOT EDIT.
// Source: infra/message/awssns.go

// Package message is a generated GoMock package.
package message

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/khu-dev/khumu-comment/data"
)

// MockMessagePublisher is a mock of MessagePublisher interface.
type MockMessagePublisher struct {
	ctrl     *gomock.Controller
	recorder *MockMessagePublisherMockRecorder
}

// MockMessagePublisherMockRecorder is the mock recorder for MockMessagePublisher.
type MockMessagePublisherMockRecorder struct {
	mock *MockMessagePublisher
}

// NewMockMessagePublisher creates a new mock instance.
func NewMockMessagePublisher(ctrl *gomock.Controller) *MockMessagePublisher {
	mock := &MockMessagePublisher{ctrl: ctrl}
	mock.recorder = &MockMessagePublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagePublisher) EXPECT() *MockMessagePublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockMessagePublisher) Publish(comment *data.CommentOutput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", comment)
}

// Publish indicates an expected call of Publish.
func (mr *MockMessagePublisherMockRecorder) Publish(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockMessagePublisher)(nil).Publish), comment)
}
