// Code generated by MockGen. DO NOT EDIT.
// Source: infra/khumu/api.go

// Package khumu is a generated GoMock package.
package khumu

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKhumuAPIAdapter is a mock of KhumuAPIAdapter interface.
type MockKhumuAPIAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockKhumuAPIAdapterMockRecorder
}

// MockKhumuAPIAdapterMockRecorder is the mock recorder for MockKhumuAPIAdapter.
type MockKhumuAPIAdapterMockRecorder struct {
	mock *MockKhumuAPIAdapter
}

// NewMockKhumuAPIAdapter creates a new mock instance.
func NewMockKhumuAPIAdapter(ctrl *gomock.Controller) *MockKhumuAPIAdapter {
	mock := &MockKhumuAPIAdapter{ctrl: ctrl}
	mock.recorder = &MockKhumuAPIAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKhumuAPIAdapter) EXPECT() *MockKhumuAPIAdapterMockRecorder {
	return m.recorder
}

// IsAuthor mocks base method.
func (m *MockKhumuAPIAdapter) IsAuthor(articleID int, authorID string) <-chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthor", articleID, authorID)
	ret0, _ := ret[0].(<-chan bool)
	return ret0
}

// IsAuthor indicates an expected call of IsAuthor.
func (mr *MockKhumuAPIAdapterMockRecorder) IsAuthor(articleID, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthor", reflect.TypeOf((*MockKhumuAPIAdapter)(nil).IsAuthor), articleID, authorID)
}
