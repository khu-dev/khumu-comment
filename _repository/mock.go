// Code generated by MockGen. DO NOT EDIT.
// Source: repository/comment.go

// Package repository is a generated GoMock package.
package _repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/khu-dev/khumu-comment/model"
)

// MockCommentRepositoryInterface is a mock of CommentRepositoryInterface interface.
type MockCommentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryInterfaceMockRecorder
}

// MockCommentRepositoryInterfaceMockRecorder is the mock recorder for MockCommentRepositoryInterface.
type MockCommentRepositoryInterfaceMockRecorder struct {
	mock *MockCommentRepositoryInterface
}

// NewMockCommentRepositoryInterface creates a new mock instance.
func NewMockCommentRepositoryInterface(ctrl *gomock.Controller) *MockCommentRepositoryInterface {
	mock := &MockCommentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepositoryInterface) EXPECT() *MockCommentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentRepositoryInterface) Create(comment *model.Comment) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", comment)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentRepositoryInterfaceMockRecorder) Create(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).Create), comment)
}

// Delete mocks base method.
func (m *MockCommentRepositoryInterface) Delete(id int) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentRepositoryInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockCommentRepositoryInterface) Get(id int) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommentRepositoryInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).Get), id)
}

// List mocks base method.
func (m *MockCommentRepositoryInterface) List(opt *CommentQueryOption) []*model.Comment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opt)
	ret0, _ := ret[0].([]*model.Comment)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockCommentRepositoryInterfaceMockRecorder) List(opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).List), opt)
}

// Update mocks base method.
func (m *MockCommentRepositoryInterface) Update(id int, opt map[string]interface{}) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, opt)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommentRepositoryInterfaceMockRecorder) Update(id, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentRepositoryInterface)(nil).Update), id, opt)
}

// MockLikeCommentRepositoryInterface is a mock of LikeCommentRepositoryInterface interface.
type MockLikeCommentRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLikeCommentRepositoryInterfaceMockRecorder
}

// MockLikeCommentRepositoryInterfaceMockRecorder is the mock recorder for MockLikeCommentRepositoryInterface.
type MockLikeCommentRepositoryInterfaceMockRecorder struct {
	mock *MockLikeCommentRepositoryInterface
}

// NewMockLikeCommentRepositoryInterface creates a new mock instance.
func NewMockLikeCommentRepositoryInterface(ctrl *gomock.Controller) *MockLikeCommentRepositoryInterface {
	mock := &MockLikeCommentRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLikeCommentRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeCommentRepositoryInterface) EXPECT() *MockLikeCommentRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLikeCommentRepositoryInterface) Create(like *model.LikeComment) (*model.LikeComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", like)
	ret0, _ := ret[0].(*model.LikeComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLikeCommentRepositoryInterfaceMockRecorder) Create(like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLikeCommentRepositoryInterface)(nil).Create), like)
}

// Delete mocks base method.
func (m *MockLikeCommentRepositoryInterface) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLikeCommentRepositoryInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLikeCommentRepositoryInterface)(nil).Delete), id)
}

// List mocks base method.
func (m *MockLikeCommentRepositoryInterface) List(opt *LikeCommentQueryOption) []*model.LikeComment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opt)
	ret0, _ := ret[0].([]*model.LikeComment)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockLikeCommentRepositoryInterfaceMockRecorder) List(opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLikeCommentRepositoryInterface)(nil).List), opt)
}
