// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://github.com/khu-dev",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/comments/": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                ],
                "summary": "Comment List를 조회합니다.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "admin group이 아닌 이상은 게시물 id를 꼭 정의해야합니다.",
                        "name": "article",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.CommentsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "사용 가능한 필드는 주로 Get API의 응답에 있는 필드와 유사합니다.\nauthor field는 요청자의 Authorization header의 값을 이용합니다.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comment"
                ],
                "summary": "Comment를 생성합니다.",
                "parameters": [
                    {
                        "description": "어떤 게시물의 댓글인지",
                        "name": "article",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "익명인지, 기명인지",
                        "name": "kind",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "댓글 내용",
                        "name": "content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.CommentResponse"
                        }
                    }
                }
            }
        },
        "/api/comments/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comment"
                ],
                "summary": "Comment 조회합니다.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.CommentResponse"
                        }
                    }
                }
            }
        },
        "/api/like-comments/": {
            "put": {
                "description": "현재 좋아요 상태이면 삭제, 좋아요 상태가 아니면 생성합니다.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Like Comment"
                ],
                "summary": "Comment에 대한 \"좋아요\"를 생성하거나 삭제합니다.",
                "parameters": [
                    {
                        "description": "좋아요할 comment의 ID",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.CommentResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http.CommentResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "this contains any format of comments",
                    "$ref": "#/definitions/model.Comment"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "http.CommentsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "this contains any format of comments",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Comment"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Comment": {
            "type": "object",
            "properties": {
                "article": {
                    "type": "integer"
                },
                "author": {
                    "$ref": "#/definitions/model.KhumuUserSimple"
                },
                "children": {
                    "description": "Has-Many relationship =\u003e Preload 필요",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Comment"
                    }
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kind": {
                    "description": "Kind: (anonymous, named)",
                    "type": "string"
                },
                "like_comment_count": {
                    "type": "integer"
                },
                "parent": {
                    "$ref": "#/definitions/model.Comment"
                },
                "state": {
                    "description": "State: (exists, deleted)",
                    "type": "string"
                }
            }
        },
        "model.KhumuUserSimple": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Docs::KHUMU Comment",
	Description: "KHUMU의 Comment와 Comment-Like에 대한 RESTful API server",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
